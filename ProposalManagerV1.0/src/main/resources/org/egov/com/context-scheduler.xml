<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- Spring Scheduler 설정내용 :: 사용안함 -->
<!--     <task:scheduler id="mainScheduler" pool-size="10" />
    <task:annotation-driven scheduler="mainScheduler" /> -->

<!-- Scheduling Config File 
     : Quartz Scheduler
     : Spring 4.1.2 + Quartz 2.2.1
     1)설명 : Scheduler 는 Quartz 실행 환경을 관리하는 핵심 개체이다.
        Job 은 사용자가 수행할 작업을 정의하는 인터페이스로서 Trigger 개체를 이용하여 스케쥴할 수 있다.
        JobDetail 는 작업명과 작업그룹과 같은 수행할 Job에 대한 상세 정보를 정의하는 개체이다.
        Trigger 는 정의한 Job 개체의 실행 스케쥴을 정의하는 개체로서 Scheduler 개체에게 Job 수행시점을 알려주는 개체이다.
     2)구성 : 10.작업생성, 20.작업 스케쥴링, 30.작업 시작하기
     
     3)버전주의사항  : Spring 4.1.2 + Quartz 2.2.1 외 하위버전 사용시 (예 Spring 3.2 와 Quartz 1.8)
       11. 과 12. 에 JobDetailFactoryBean -> JobDetailBean
       21. SimpleTriggerFactoryBean -> SimpleTriggerBean
       22. CronTriggerFactoryBean -> CronTriggerBean
-->
<!-- 10.작업생성 
   Spring은 작업 생성을 위한 방법으로 다음 두 가지 방식을 제공한다.
   11.JobDetailBean을 이용한 방법으로, QuartzJobBean을 상속받아 Job 클래스를 생성하는 방법
   12.MethodInvokingJobDetailFactoryBean을 이용하여 Bean 객체의 메소드를 직접 호출하는 방법
-->
<!-- 11.JobDetailBean을 이용한 작업 생성
   JobDetail는 작업 실행에 필요한 정보를 담고 있는 객체이다.
   Spring은 JobDetail 빈 생성을 위해 JobDetailBean을 제공한다.
   jobDataAsMap 개체를 이용하여 JobDetail 개체에 Job 설정에 필요한 속성 정보를 전달한다.
 -->
<!--     <bean id="jobDetailBean"
    class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="egovframework.rte.fdl.scheduling.sample.SayHelloJob" />
        <property name="jobDataAsMap">
            <map>
                <entry key="name" value="JobDetail"/>
            </map>
        </property>
    </bean> -->
<!-- 12.MethodInvokingJobDetailFactoryBean을 이용한 작업 생성
정의한 Bean 객체의 메소드를 직접 호출하는 작업을 생성하기 위해 MethodInvokingJobDetailFactoryBean을 정의한다.
-->
<!-- //  -->
<!--     
    <bean id="sayHelloService" class="egovframework.rte.fdl.scheduling.sample.SayHelloService">
        <property name="name" value="FactoryBean"/>
    </bean>
     
    <bean id="jobDetailFactoryBean"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject" ref="sayHelloService" />
        <property name="targetMethod" value="sayHello" />
        <property name="concurrent" value="false" />
    </bean> -->
<!-- 20.작업 스케쥴링 
  Spring에서 주로 사용되는 Trigger타입은 SimpleTriggerBean과 CronTriggerBean 이 있다.
  SimpleTrigger 는 특정 시간, 반복 회수, 대기 시간과 같은 단순 스케쥴링에 사용된다. 
  CronTrigger 는 유닉스의 Cron 명령어와 유사하며, 복잡한 스케쥴링에 사용된다.
  CronTrigger 는 달력을 이용하듯 특정 시간, 요일, 월에 Job 을 수행하도록 설정할 수 있다. 
-->
  <!-- 21.SimpleTrigger 를 이용한 설정 
    앞서 JobDetailBean 을 이용하여 생성한 작업을 스케쥴링을 위한 Trigger 에 등록한다.
  SimpleTriggerBean은 즉시 시작하고 매 10초마다 실행하도록 설정하였다.
  
  -->
<!--     <bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetailBean" />
        즉시 시작
        <property name="startDelay" value="0" />
        매 10초마다 실행
        <property name="repeatInterval" value="10000" />
    </bean> -->
  <!-- 22.CronTriggerBean 를 이용한 설정
    앞서 MethodInvokingJobDetailFactoryBean 을 이용하여 생성한 작업을 스케쥴링을 위한 Trigger 에 등록한다.
  CronTriggerBean은 매 10초마다 실행하도록 설정하였다. 
   -->
   <!--  -->
<!--     <bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="jobDetailFactoryBean" /> -->
      <!--   매 10초마다 실행 -->
<!--         <property name="cronExpression" value="*/10 * * * * ?" />
    </bean> --> 

<!-- 30.작업 시작하기 
     스케쥴링한 작업의 시작을 위해 Spring 은 SchedulerFactoryBean을 제공한다. 
  SchedulerFactoryBean 을 이용하여 SimpleTriggerBean 과 CronTriggerBean 기반의 각 Trigger 작업을 시작한다.
 -->
 <!--  -->
<!--     <bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list> -->
<!--  <ref bean="simpleTrigger" /> -->
<!--                 <ref bean="cronTrigger" />
            </list>
        </property>
    </bean> -->
</beans>
